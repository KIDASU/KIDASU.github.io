<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>异空间の格子怪</title>
  
  <subtitle>Megumi 赛高~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-07T14:08:26.658Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>格子怪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>litemall中使用的相关技术知识合集</title>
    <link href="http://yoursite.com/2020/01/03/litemall%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86/"/>
    <id>http://yoursite.com/2020/01/03/litemall%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86/</id>
    <published>2020-01-03T10:34:42.000Z</published>
    <updated>2020-01-07T14:08:26.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet的并发机制"><a href="#Servlet的并发机制" class="headerlink" title="Servlet的并发机制"></a>Servlet的并发机制</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>单例多线程：一个servlet类只实例化一个对象（在第一次被调用时），多个线程共享这个对象</p><p><strong>利用线程池管理多线程</strong></p><h3 id="线程池的管理"><a href="#线程池的管理" class="headerlink" title="线程池的管理"></a>线程池的管理</h3><p>1、线程池开始工作时，就会创建最小空闲数的线程在池里。</p><p>2、当同一时间请求数量大于最小空闲数20，比如来了50个并发请求，那么线程池还需要创建30个线程来处理请求。</p><p>3、空闲线程：一个线程在60s的时间内，一直处于等待。那么就可以判定该线程是空闲。</p><p>4、空闲线程是在最小空闲数以上，则会被回收。</p><p>（1）当请求并发高于500最大空闲数的时候，线程池是会继续创建线程的，来满足特大突发性并发。当并发请求数降下之后，线程池中有空闲，那么，无论线程空闲时间是否达到60s，线程池都会进行回收至500。</p><p>（2）500以内的线程也会根据空闲时间是否大于60s来判断是否需要进行回收。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p> Servlet 遵循的过程：</p><ul><li><p>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化。</p></li><li><p>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</p></li><li><p>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</p></li><li><p>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</p></li></ul><p> 周期方案</p><ul><li><p>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</p></li><li><p>Servlet 容器在调用 service() 方法之前加载 Servlet。</p></li><li><p>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。</p></li></ul><h2 id="Servlet并发机制"><a href="#Servlet并发机制" class="headerlink" title="Servlet并发机制"></a>Servlet并发机制</h2><h3 id="Servlet并发机制的优点"><a href="#Servlet并发机制的优点" class="headerlink" title="Servlet并发机制的优点"></a>Servlet并发机制的优点</h3><p>•<strong>通过线程池管理多线程</strong></p><p>  （1）降低资源消耗–&gt;重复利用已经创建的线程</p><p>  （2）提高响应速度–&gt;当请求到达时而线程池中有空闲线程时候，可以直接从线程池获取线程,而不需要创建新的线程</p><p>  （3）提高线程的可管理性–&gt;使用线程池可以统一分配,调优和监控,例如可以根据系统的承受能力,调增线程池中工作线程的数目</p><p>•<strong>单例</strong></p><p>  （1）由于单例模式在内存中只有一个实例，减少内存开支，特别是一个对象需要频繁地创建销毁时。</p><p>  （2）由于单例模式只生成一个实例，所以，减少系统的性能开销。</p><h3 id="SERVLET并发机制的缺点：多线程同步问题"><a href="#SERVLET并发机制的缺点：多线程同步问题" class="headerlink" title="SERVLET并发机制的缺点：多线程同步问题"></a>SERVLET并发机制的缺点：多线程同步问题</h3><p>即不加锁会导致数据不同意，加锁会降低效率</p><h1 id="Maven多项目管理"><a href="#Maven多项目管理" class="headerlink" title="Maven多项目管理"></a>Maven多项目管理</h1><p>maven是专门用于构建和管理java相关项目的工具</p><h1 id="Litemall后端体系结构和模块划分"><a href="#Litemall后端体系结构和模块划分" class="headerlink" title="Litemall后端体系结构和模块划分"></a>Litemall后端体系结构和模块划分</h1><p>dao层操作数据</p><p>service层即业务逻辑层。</p><p>service层的作用为完成功能设计。</p><p>service层调用dao层接口，接收dao层返回的数据，完成项目的基本功能设计。</p><p>controller层即控制层。</p><p>controller层的功能为请求和响应控制。</p><p>controller层负责前后端交互，接受前端请求，调用service层，接收service层返回的数据，最后返回具体的页面和数据到客户端。</p><p><strong>VO</strong>（<strong>View Object</strong>）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）用于展示的数据封装起来。</p><p><strong>DTO</strong>（<strong>Data Transfer Object</strong>）：数据传输对象，将数据封装成普通的POJO，在J2EE多个层次之间传输。</p><p><strong>PO</strong>（<strong><em>Persistent Object</em></strong>）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p><h1 id="NGINX服务器"><a href="#NGINX服务器" class="headerlink" title="NGINX服务器"></a>NGINX服务器</h1><p>nginx高并发——异步非阻塞，负载能力高于阻塞的apache</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>nginx为服务器端负载均衡</p><p>它与ribbon的区别：</p><p>nginx为集中式LB：即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方</p><p>ribbon为进程内LB：集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>代理服务器接受请求</p><p>作用：保证内网安全，通常将反向代理作为公网访问地址，web服务器是内网</p><h2 id="HTTP服务器（动静态分离）"><a href="#HTTP服务器（动静态分离）" class="headerlink" title="HTTP服务器（动静态分离）"></a>HTTP服务器（动静态分离）</h2><p>静态资源做好缓存</p><p>动态请求交给tomcat</p><h1 id="Docker服务"><a href="#Docker服务" class="headerlink" title="Docker服务"></a>Docker服务</h1><p>对比学习——虚拟机</p><p>Docker 通过命名空间实现了资源隔离</p><p>Linux容器虚拟技术（Linux container），它是Docker容器技术的基础，Docker轻量级的虚拟化，虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动慢。</p><p>传统虚拟机在硬件层面上实现虚拟化，需要有额外的虚拟机管理应用和虚拟机操作系统，而Docker容器是在操作系统层面上实现的虚拟化，直接利用本地主机的操作系统，因此更轻量。</p><p>对比：</p><p>Docker启动快速属于秒级别。虚拟机通常需要几分钟去启动。</p><p>Docker需要的资源更少，Docker在操作系统级别进行虚拟化，Docker容器和内核交互，几乎没有性能损耗，性能优于通过Hypervisor层与内核层的虚拟化。</p><p>Docker更轻量，Docker的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境，Docker运行的镜像数远多于虚拟机数量。对系统的利用率非常高。</p><p>与虚拟机相比，Docker隔离性更弱，Docker属于进程之间的隔离，虚拟机可实现系统级别隔离。</p><p>安全性：Docker的安全性也更弱。Docker的租户root和宿主机root等同，一旦容器内的用户从普通用户权限提升为root权限，它就直接具备了宿主机的root权限，进而可进行无限制的操作。虚拟机租户root权限和宿主机的root虚拟机权限是分离的，并且虚拟机利用如Intel的VT-d和VT-x的ring-1硬件隔离技术，这种隔离技术可以防止虚拟机突破和彼此交互，而容器至今还没有任何形式的硬件隔离，这使得容器容易受到攻击。</p><p>可管理性：Docker的集中化管理工具还不算成熟。各种虚拟化技术都有成熟的管理工具，例如VMware vCenter提供完备的虚拟机管理能力。</p><p>高可用和可恢复性：Docker对业务的高可用支持是通过快速重新部署实现的。虚拟化具备负载均衡、高可用、容错、迁移和数据保护等经过生产实践检验的成熟保障机制，VMware可承诺虚拟机99.999%高可用，保证业务连续性。</p><p>快速创建、删除：虚拟化创建是分钟级别的，Docker容器创建是秒级别的，Docker的快速迭代性，决定了无论是开发、测试、部署都可以节约大量时间。</p><p>交付、部署：虚拟机可以通过镜像实现环境交付的一致性，但镜像分发无法体系化；Docker在Dockerfile中记录了容器构建过程，可在集群中实现快速分发和快速部署。</p><h1 id="基于Redis的库存并发设计"><a href="#基于Redis的库存并发设计" class="headerlink" title="基于Redis的库存并发设计"></a>基于Redis的库存并发设计</h1><h2 id="redis作用"><a href="#redis作用" class="headerlink" title="redis作用"></a>redis作用</h2><p>（1）Redis是将数据存到内存中，而Mysql存在磁盘中，从内存中读取数据更快</p><p>（2）访问率高但更新频率较低的数据，可以添加缓存，减少Mysql压力</p><p>（3）查询时先从Redis中查，没有再去Mysql中查，将查到的数据放缓存中一份。</p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用消息队列主要是为了通过异步处理提高系统性能和<strong>削峰</strong>、<strong>降低系统耦合性</strong>。</p><p>削峰：</p><p>在不使用消息队列服务器的时候，用户的请求数据直接写入数据库，在高并发的情况下数据库压力剧增，使得响应速度变慢。但是在使用消息队列之后，用户的请求数据发送给消息队列之后立即 返回，再由消息队列的消费者进程从消息队列中获取数据，异步写入数据库。由于消息队列服务器处理速度快于数据库（消息队列也比数据库有更好的伸缩性），因此响应速度得到大幅改善。</p><p>降低耦合：</p><p>消息队列使利用发布-订阅模式工作，消息发送者（生产者）发布消息，一个或多个消息接受者（消费者）订阅消息。对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计。</p><p>注意：为了避免消息队列服务器宕机造成消息丢失，会将成功发送到消息队列的消息存储在消息生产者服务器上，等消息真正被消费者服务器处理后才删除消息。在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。</p><h1 id="ZUUL网关相关"><a href="#ZUUL网关相关" class="headerlink" title="ZUUL网关相关"></a>ZUUL网关相关</h1><p>Zuul包含了对请求的路由和过滤两个最主要的功能</p><p>是实现外部访问统一入口的基础而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础</p><p>filter进行权限判断的过滤</p><h1 id="Eureka相关"><a href="#Eureka相关" class="headerlink" title="Eureka相关"></a>Eureka相关</h1><p>详见Eureka学习</p><h1 id="ribbon相关"><a href="#ribbon相关" class="headerlink" title="ribbon相关"></a>ribbon相关</h1><p>客户端的负载均衡</p><p>HA（高可用）</p><p>集成到消费方，进程内LB（load balance）</p><p>默认有轮询算法、随机等等 </p><p>IRule作为接口，可以自定义实现LB算法</p><p>feign负载均衡</p><p>声明式的web服务器调用</p><p>ribbon+restTemplate面向微服务名获得调用地址，feign通过接口+注释调用服务</p>]]></content>
    
    <summary type="html">
    
      实际上是期末复习笔记
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Eureka专题学习</title>
    <link href="http://yoursite.com/2019/12/30/Eureka%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/12/30/Eureka%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-12-30T09:23:31.000Z</published>
    <updated>2019-12-30T16:24:52.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka专题学习"><a href="#Eureka专题学习" class="headerlink" title="Eureka专题学习"></a>Eureka专题学习</h1><h2 id="什么是eureka？"><a href="#什么是eureka？" class="headerlink" title="什么是eureka？"></a>什么是eureka？</h2><p>first，用于微服务的注册与发现</p><p>second，只需要使用<strong>服务标识符</strong>，就可以访问到服务 </p><h2 id="eureka的基本框架"><a href="#eureka的基本框架" class="headerlink" title="eureka的基本框架"></a>eureka的基本框架</h2><p>eureka采用c-s架构。</p><p>eureka server 作为服务注册功能的服务器，是服务注册中心</p><p>使用client端连接到server并维持心跳链接</p><p><img src="/images/2019/12/31/a494e270-2b20-11ea-ac8d-3be82851e608.png" alt="1575706029518.png"></p><p><strong>三大角色</strong></p><p>Eureka Server 提供服务注册和发现</p><p>Service Provider服务提供方将自身服务注册到Eureka，从而使服务消费方能够找到</p><p>Service Consumer服务消费方从Eureka获取注册服务列表，从而能够消费服务</p><h2 id="EurekaServer构造步骤"><a href="#EurekaServer构造步骤" class="headerlink" title="EurekaServer构造步骤"></a>EurekaServer构造步骤</h2><h3 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h3><p>新增一个相关的maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-server服务端 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure><h3 id="注解标签"><a href="#注解标签" class="headerlink" title="注解标签"></a>注解标签</h3><p>再在主启动类上面，标注启动改新组建的注解标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@EnableEurekaServer</span></pre></td></tr></table></figure><h3 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">instance:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">client:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#false表示不向注册中心注册自己。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">service-url:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>        <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span></span></pre></td></tr></table></figure><h3 id="成功效果"><a href="#成功效果" class="headerlink" title="成功效果"></a>成功效果</h3><p><img src="/images/2019/12/31/b615eee0-2b20-11ea-ac8d-3be82851e608.png" alt="1575716796572.png"></p><h2 id="EurekaClient构造步骤"><a href="#EurekaClient构造步骤" class="headerlink" title="EurekaClient构造步骤"></a>EurekaClient构造步骤</h2><h3 id="pom文件配置-1"><a href="#pom文件配置-1" class="headerlink" title="pom文件配置"></a>pom文件配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将微服务provider侧注册进eureka --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure><h3 id="application-yml配置-1"><a href="#application-yml配置-1" class="headerlink" title="application.yml配置"></a>application.yml配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">client:</span> <span class="comment">#客户端注册进eureka服务列表内</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">service-url:</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span></pre></td></tr></table></figure><h3 id="注解标签-1"><a href="#注解标签-1" class="headerlink" title="注解标签"></a>注解标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@EnableEurekaClient</span></pre></td></tr></table></figure><h3 id="成功效果-1"><a href="#成功效果-1" class="headerlink" title="成功效果"></a>成功效果</h3><p><img src="/images/2019/12/31/c3ed7b50-2b20-11ea-ac8d-3be82851e608.png" alt="1575718837035.png"></p><p><img src="/images/2019/12/31/c3edc970-2b20-11ea-ac8d-3be82851e608.png" alt="1575718898842.png"></p><h2 id="actuator与注册微服务信息完善"><a href="#actuator与注册微服务信息完善" class="headerlink" title="actuator与注册微服务信息完善"></a>actuator与注册微服务信息完善</h2><h3 id="主机名称-服务名称修改"><a href="#主机名称-服务名称修改" class="headerlink" title="主机名称:服务名称修改"></a>主机名称:服务名称修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">eureka:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  client: #客户端注册进eureka服务列表内</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    service-url:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:7001&#x2F;eureka</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  instance:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    instance-id: wyf-dept8001</span></pre></td></tr></table></figure><p><img src="/images/2019/12/31/d23073c0-2b20-11ea-ac8d-3be82851e608.png" alt="1575719676946.png"></p><h3 id="访问信息有IP提示"><a href="#访问信息有IP提示" class="headerlink" title="访问信息有IP提示"></a>访问信息有IP提示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">eureka:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  client: #客户端注册进eureka服务列表内</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    service-url:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:7001&#x2F;eureka</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  instance:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    instance-id: wyf-dept8001  #自定义服务名称信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    prefer-ip-address: true     #访问路径可以显示IP地址</span></pre></td></tr></table></figure><p><img src="/images/2019/12/31/d8af81f0-2b20-11ea-ac8d-3be82851e608.png" alt="1575719697300.png"></p><h3 id="微服务info信息"><a href="#微服务info信息" class="headerlink" title="微服务info信息"></a>微服务info信息</h3><p>pom修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure><p>yml修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">info:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  app.name: study-springcloud-micoservices</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  company.name: www.megumisaikou.club</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  build.artifactId: $&#123;project.artifactId&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  build.version: $&#123;project.version&#125;</span></pre></td></tr></table></figure><p><img src="/images/2019/12/31/e53adf50-2b20-11ea-ac8d-3be82851e608.png" alt="1575720821437.png"></p><h2 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h2><p>“好死不如赖活着”</p><p><strong>某时刻某一个微服务不可用了，eureka不会立刻清理，依旧会对该微服务的信息进行保存</strong></p><p>长时间没有心跳（网络拥堵调用超时、真的死了）</p><p>但不会马上注销</p><p>在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。</p><p>自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</p><h2 id="服务的发现"><a href="#服务的发现" class="headerlink" title="服务的发现"></a>服务的发现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">@EnableDiscoveryClient</span></pre></td></tr></table></figure><p>是一种对外展现</p><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p>在不同的服务器上配置相同的服务，对外表现为超大运算的整体</p><p>域名区分与映射</p><p>3台eureka服务器的yml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">server: </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  port: 7001</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">eureka: </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  instance:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    hostname: eureka7001.com #eureka服务端的实例名称</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  client: </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    register-with-eureka: false     #false表示不向注册中心注册自己。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    service-url: </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      #单机 defaultZone: http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;</span></pre></td></tr></table></figure><p>微服务发布到上面3台eureka集群配置中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">server:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  port: 8001</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">mybatis:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  config-location: classpath:mybatis&#x2F;mybatis.cfg.xml  #mybatis所在路径</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  type-aliases-package: com.atguigu.springcloud.entities #entity别名类</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  mapper-locations:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  - classpath:mybatis&#x2F;mapper&#x2F;**&#x2F;*.xml #mapper映射文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">spring:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   application:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    name: microservicecloud-dept </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">   datasource:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    driver-class-name: org.gjt.mm.mysql.Driver</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;cloudDB01</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    username: root</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    password: 123456</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    dbcp2:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      min-idle: 5</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      initial-size: 5</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      max-total: 5</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      max-wait-millis: 200</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">eureka:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  client: #客户端注册进eureka服务列表内</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    service-url: </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  instance:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    instance-id: microservicecloud-dept8001   #自定义服务名称信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    prefer-ip-address: true     #访问路径可以显示IP地址</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">info:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  app.name: atguigu-microservicecloud</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">  company.name: megumisaikou.club</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  build.artifactId: $project.artifactId$</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">  build.version: $project.version$</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      关于我理解的Eureka的文章
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>养成类游戏学导论Ⅰ（更新中~</title>
    <link href="http://yoursite.com/2019/11/30/%E5%85%BB%E6%88%90%E7%B1%BB%E6%B8%B8%E6%88%8F%E5%AD%A6%E5%AF%BC%E8%AE%BA%E2%85%A0/"/>
    <id>http://yoursite.com/2019/11/30/%E5%85%BB%E6%88%90%E7%B1%BB%E6%B8%B8%E6%88%8F%E5%AD%A6%E5%AF%BC%E8%AE%BA%E2%85%A0/</id>
    <published>2019-11-30T09:23:31.000Z</published>
    <updated>2020-04-02T11:50:27.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="编写目的"><a href="#编写目的" class="headerlink" title="编写目的"></a>编写目的</h2><p>出于对养成类游戏的理解与热爱，特写此篇</p><p>本世界基本公理<br>1、没有资源，则没有进步。<br>2、任何资源有需要一定代价去获取。</p><p>养成类游戏的本质<br>以低质量的资源换取高质量的资源。一般地，低质量的资源指可以时间回复的质量单位。</p><p>养成类游戏的主要矛盾<br>玩家有限的时间与游戏中无限的资源之间的矛盾。 ​​​​</p>]]></content>
    
    <summary type="html">
    
      关于我理解的养成类游戏世界观与方法论的文章
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/27/hello-world/"/>
    <id>http://yoursite.com/2019/11/27/hello-world/</id>
    <published>2019-11-27T14:53:01.509Z</published>
    <updated>2019-11-30T04:48:32.306Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      这是一篇hexo的初始文章
    
    </summary>
    
    
    
  </entry>
  
</feed>
